version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: crm-postgres
    environment:
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: crm_password
      POSTGRES_DB: mini_crm_development
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crm_user -d mini_crm_development"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Rails Backend (Development)
  rails:
    build:
      context: ./mini-crm
      dockerfile: Dockerfile.dev
    container_name: crm-rails
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: crm_user
      DATABASE_PASSWORD: crm_password
      DATABASE_NAME_DEVELOPMENT: mini_crm_development
      DATABASE_NAME_TEST: mini_crm_test
      RAILS_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./mini-crm:/rails
      - rails_bundle:/usr/local/bundle
    command: bin/dev
    stdin_open: true
    tty: true

  # React Frontend (Future)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: crm-frontend
    depends_on:
      - rails
    environment:
      REACT_APP_API_URL: http://localhost:3000/api/v1
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - frontend_modules:/app/node_modules
    command: npm start
    # Uncomment when frontend is ready
    # profiles: ["frontend"]

volumes:
  postgres_data:
  rails_bundle:
  frontend_modules: